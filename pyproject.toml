[tool.poetry]
name = "s3lfs"
version = "0.1.0"
description = "A Python-based version control system for large assets using Amazon S3."
authors = ["Kevin Blackburn-Matzen <matzen@adobe.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"
boto3 = "^1.28.0"
tqdm = "^4.64.0"
click = "^8.1.8"
portalocker = "^3.1.1"

[tool.poetry.scripts]
s3lfs = "s3lfs.cli:main"

[tool.poetry.group.dev.dependencies]
pytest-cov = "<6.0.0"
pytest = "^7.0"
pytest-mock = "^3.7.0"
coverage = "^6.0"
black = "^22.0"
pre-commit = "^4.2.0"
moto = {extras = ["s3"], version = "^4.0.0"}
mypy = "^1.0.0"
types-boto3 = "^1.0.0"

[tool.mypy]
python_version = "3.9"
warn_return_any = false  # Start lenient
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can be made stricter later
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Allow unused ignores for now
warn_no_return = false  # Allow missing returns for now
warn_unreachable = false  # Allow unreachable code for now
strict_equality = true
ignore_missing_imports = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "moto.*",
    "portalocker.*",
    "tqdm.*",
]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
